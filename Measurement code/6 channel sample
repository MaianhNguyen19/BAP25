#include <SPI.h>

#define CS_PIN       5
#define NUM_CHANNELS 6
#define SAMPLE_RATE  1000  // desired sampling rate in Hz

hw_timer_t *timer = nullptr;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
volatile bool sampleReady = false;
uint16_t latest[NUM_CHANNELS];

void IRAM_ATTR onTimer() {
  portENTER_CRITICAL_ISR(&timerMux);
  sampleReady = true;
  portEXIT_CRITICAL_ISR(&timerMux);
}

uint16_t readMCP3208(uint8_t ch) {
  uint8_t cmd = 0b00000110 | ((ch & 0b100) >> 2);
  uint8_t msb = (ch & 0b011) << 6;

  SPI.beginTransaction(SPISettings(2000000, MSBFIRST, SPI_MODE0));
  digitalWrite(CS_PIN, LOW);
  SPI.transfer(cmd);
  uint8_t h = SPI.transfer(msb) & 0x0F;
  uint8_t l = SPI.transfer(0x00);
  digitalWrite(CS_PIN, HIGH);
  SPI.endTransaction();
  return (h << 8) | l;
}

void setup() {
  Serial.begin(921600);
  while (!Serial);

  SPI.begin(18, 19, 23, CS_PIN);
  pinMode(CS_PIN, OUTPUT);
  digitalWrite(CS_PIN, HIGH);

  // —————————————
  //  Timer setup
  // —————————————
  //
  // 1) timerBegin(frequency) sets tick rate in Hz
  //    We'll choose 1 000 000 so each tick = 1 µs
  timer = timerBegin(1000000);

  // 2) attach your ISR
  timerAttachInterrupt(timer, onTimer);

  // 3) set an alarm at (ticks per second / SAMPLE_RATE),
  //    e.g. 1 000 000 Hz / 1000 Hz = 1000 ticks = 1 ms
  timerAlarm(timer, 1000000 / SAMPLE_RATE, true, 0);

  // 4) start it
  timerStart(timer);

  Serial.println("timestamp_us,ch0,ch1,ch2,ch3,ch4,ch5");
}

void loop() {
  if (!sampleReady) return;
  portENTER_CRITICAL(&timerMux);
    sampleReady = false;
  portEXIT_CRITICAL(&timerMux);

  uint32_t t = micros();
  for (uint8_t i = 0; i < NUM_CHANNELS; i++) {
    latest[i] = readMCP3208(i);
  }

  // print one CSV line
  Serial.print(t);
  for (uint8_t i = 0; i < NUM_CHANNELS; i++) {
    Serial.print(',');
    Serial.print(latest[i]);
  }
  Serial.println();
}
